searchState.loadedDescShard("base_db", 0, "base_db defines basic database traits. The concrete DB is …\nPath relative to a file.\nPath relative to a file.\nOptional build metadata identifier. This comes after <code>+</code> in …\nOrigin of the crates.\nCrate related data shared by the whole workspace.\nThe mapping from <code>UniqueCrateData</code> to their <code>Crate</code> input.\nContains the error value\nCrate data unrelated to analysis.\nEncapsulate a bunch of raw <code>.set</code> calls on the database.\nHandle to a file in <code>Vfs</code>\nA set of <code>VfsPath</code>s identified by <code>FileId</code>s.\nCrates that are provided by the language, like std, core, …\nCrates that are non member libraries.\nCrates that are workspace members.\nContains the success value\nOptional pre-release identifier on a version string. This …\nDatabase which stores all significant input facts: source …\nCrates that are from the rustc workspace.\nA <code>VersionReq</code> with no constraint on the version numbers it …\nFiles are grouped into source roots. A source root is a …\nThe crate data from which we derive the <code>Crate</code>.\n<strong>SemVer version</strong> as defined by https://semver.org.\n<strong>SemVer version requirement</strong> describing the intersection of …\nPath in <code>Vfs</code>.\nFile that this path is relative to.\nFile that this path is relative to.\nReturns the <code>AbsPath</code> representation of <code>self</code> if <code>self</code> is on …\nCompare the major, minor, patch, and pre-release value of …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nThe dependencies of this crate.\nThe dependencies of this crate.\nA name used in the package’s project declaration: for …\nExtends this crate graph by adding a complete second crate …\nCrate data that is not needed for analysis.\nGet the id corresponding to <code>path</code> if it exists in the set.\nText of the file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert the <code>file_id, path</code> pair into the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSysroot or crates.io library.\nWhether this dependency is to be added to the depending …\nWhether this dependency is a sysroot injected one.\nIterate over this set’s ids.\nCreates a new <code>VfsPath</code> with <code>path</code> adjoined to <code>self</code>.\nReturns the number of stored paths.\nEvaluate whether the given <code>Version</code> satisfies the version …\nReturns <code>self</code>’s base name and file extension.\nCreate <code>Version</code> with an empty pre-release and build …\nCreates a crate name, checking for dashes in the string …\nCreate a path from string. Input should be a string …\nCreates an “in-memory” path from <code>/</code>-separated string.\nCreates a crate name, unconditionally replacing the dashes …\nReturns the <code>VfsPath</code> without its final component, if there …\nCreate <code>Version</code> by parsing from string representation.\nCreate <code>VersionReq</code> by parsing from string representation.\nPath relative to <code>anchor</code>’s containing directory.\nPath relative to <code>anchor</code>’s containing directory.\nGet the path corresponding to <code>file</code> if it exists in the set.\nRemove the last component of <code>self</code> if there is one.\nThe cfg options that could be used by the crate\nThe working directory to run proc-macros in invoked in the …\nThe working directory to run proc-macros in invoked in the …\nRemoves all crates from this crate graph except for the …\nGet the id of the file corresponding to <code>path</code>.\nSource root of the file.\nContents of the source root.\nSource root of the file.\nReturns <code>true</code> if <code>other</code> is a prefix of <code>self</code>.\nToolchain version used to compile the crate.\nReturns an iterator over all transitive dependencies of …")