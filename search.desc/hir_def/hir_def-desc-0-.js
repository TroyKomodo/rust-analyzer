searchState.loadedDescShard("hir_def", 0, "<code>hir_def</code> crate contains everything between macro expansion …\nA Data Type\n<code>#[rust_analyzer::completions(...)]</code> options.\nA TypeOrConstParamId with an invariant that it actually …\nA <code>ModuleId</code> that is always a crate’s root module.\nThe defs which have a body (have root expressions for type …\nA constant, which might appears as a const item, an …\nA generic param\n<code>#[rust_analyzer::completions(ignore_flyimport)]</code>.\n<code>#[rust_analyzer::completions(ignore_flyimport_methods)]</code> …\n<code>#[rust_analyzer::completions(ignore_methods)]</code> (on a trait …\nA wrapper around three booleans\nAn ID of a module, <strong>local</strong> to a <code>DefMap</code>.\nA macro\nThe defs which can be visible in the module.\nA TypeOrConstParamId with an invariant that it actually …\nNo <code>#[rust_analyzer::completions(...)]</code>.\nGet a flags value with all known bits set.\nIf true, paths containing <code>#[unstable]</code> segments may be …\nReturns the <code>CrateRootModuleId</code> for this module if it is the …\nA higher level attributes based on TokenTree, with also …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThis module defines built-in types.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the module containing <code>self</code>, either the parent <code>mod</code>, …\nWhether all set bits in a source flags value are also set …\nDefines database &amp; queries for name resolution.\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nReturns the <code>CrateRootModuleId</code> for this module.\nThe intersection of a source flags value with the …\nThis module defines a <code>DynMap</code> – a container for …\nGet a flags value with all bits unset.\nDefines <code>ExpressionStore</code>: a lowered representation of …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nAn algorithm to find a path to refer to a certain item.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCaller should check if this toc id really belongs to a type\nCaller should check if this toc id really belongs to a …\nThis module describes hir-level representation of …\nA map of all publicly exported items in a crate.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether this module represents the crate root module\nWhether all bits in this flags value are unset.\nDescribes items defined or visible (ie, imported) in a …\nA simplified AST that only contains items.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns the crate this thing is defined within.\nCollects lang items: items marked with <code>#[lang = &quot;...&quot;]</code> …\nThe module’s ID in its originating <code>DefMap</code>.\nReturns the enclosing module this thing is defined within.\nReturns the module containing <code>self</code> (or <code>self</code>, if <code>self</code> is …\nThe containing module.\nThis module implements import-resolution/macro expansion …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nIn rust, it is possible to have a value, a type and a …\nIf true, prefer abs path (starting with <code>::</code>) where it is …\nIf true, prefer to unconditionally use imports of the <code>core</code> …\nIf true, prefer import paths containing a prelude module.\nThe intersection of a source flags value with the …\nName resolution façade.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nItem signature IR definitions\nUtilities for mapping between hir IDs and the surface …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nDefines hir-level representation of visibility (e.g. <code>pub</code> …\neg. <code>#[doc(alias(&quot;x&quot;, &quot;y&quot;))]</code>\neg. <code>#[doc(hidden)]</code>, <code>#[doc(alias = &quot;x&quot;)]</code>\nDesugared attributes of an item post <code>cfg_attr</code> expansion.\neg. <code>#[doc(hidden)]</code>\neg. <code>#[doc(alias = &quot;it&quot;)]</code>\nFind string value for a specific key inside token tree\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaps the lowered <code>Attr</code> back to its original syntax node.\nDifferent signed int types.\nDifferent unsigned int types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nXXX: AST Nodes and SyntaxNodes have identity equality …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe body of an item (function, const etc.).\nA wrapper around [<code>span::SyntaxContextId</code>] that is intended …\nReturns an iterator over all block expressions in this …\nDefines <code>Body</code>: a lowered representation of functions, …\nGet a reference to the source map’s diagnostics.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransforms <code>ast::Expr</code> into an equivalent <code>hir_def::expr::Expr</code>\nA desugared representation of paths like <code>crate::foo</code> or …\nA pretty-printer for HIR.\nName resolution for expressions.\nWalks the immediate children expressions and calls <code>f</code> for …\nWalks the immediate children expressions and calls <code>f</code> for …\nThe body of an item (function, const etc.).\nAn item body together with the mapping from syntax nodes …\nThe <code>ExprId</code> of the actual body expression.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe patterns for the function’s parameters. While the …\nReturns the argument unchanged.\nThis function find the AST fragment that corresponds to an …\nThis function find the AST generic argument from the one …\nThis function finds the AST segment that corresponds to …\nCalls <code>U::from(self)</code>.\nCollect <code>GenericArgs</code> from the parts of a fn-like path, i.e. …\nConverts an <code>ast::TypeRef</code> to a <code>hir::TypeRef</code>.\nAn associated type binding like in <code>Iterator&lt;Item = T&gt;</code>.\n<code>BarePath</code> is used when the path has neither generics nor …\nA single generic argument.\nGeneric arguments to a path segment (e.g. the <code>i32</code> in …\nA link to a lang item. It is used in desugaring of things …\n<code>Path::Normal</code> will always have either generics or type …\n<code>Fn</code>-family parenthesized traits, e.g. <code>impl Fn(u32) -&gt; String</code>…\nBounds of the form <code>Type::method(..): Send</code> or …\nThe generic arguments to the associated type. e.g. For …\nAssociated type bindings like in <code>Iterator&lt;Item = T&gt;</code>.\nBounds for the associated type, like in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a known mod path to <code>Path</code>.\nConverts a known mod path to <code>Path</code>.\nThis specifies whether the args contain a Self type as the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name of the associated type.\nWhether these generic args were written with parentheses …\nThe type bound to this associated type (in <code>Item = T</code>, this …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIf <code>scope</code> refers to a block expression scope, returns the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf <code>scope</code> refers to a labeled expression scope, returns the …\nIf <code>scope</code> refers to a macro def scope, returns the …\nReturns the scopes in ascending order.\nCauses paths to start with <code>crate</code> where applicable, …\nCauses paths to always start with either <code>self</code>, <code>super</code>, <code>crate</code>…\nCauses paths to not use a self, super or crate prefix.\nFind a path that can be used to refer to a certain item. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>asm!()</code>.\n<code>op</code> cannot be bare <code>=</code> (but can be <code>op=</code>), these are lowered to …\nExplicit binding annotations given in the HIR for a …\nhttps://doc.rust-lang.org/stable/error_codes/E0409.html\nhttps://doc.rust-lang.org/stable/error_codes/E0416.html\n<code>*</code>\n<code>..</code>\nAn expression inside a pattern. That can only occur inside …\n<code>global_asm!()</code>.\n<code>..=</code>\nUsed in range patterns.\nThis is produced if the syntax tree does not have a …\nAnnotated with <code>mut x</code> – could be either ref or not, …\n<code>naked_asm!()</code>.\n<code>-</code>\n<code>!</code>\nhttps://doc.rust-lang.org/stable/error_codes/E0408.html\nClose relative to rustc’s hir::PatKind\nThis might refer to a variable if a single segment path …\n<code>move</code> keyword was not specified.\nAnnotated as <code>ref</code>, like <code>ref x</code>\nAnnotated as <code>ref mut x</code>.\nNo binding annotation given: this means that the final …\n<code>move |x| y + x</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nParses <code>format_args</code> input.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nPre-type IR item generics\nNote that this may not be the direct <code>SyntaxContextId</code> of …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nHIR for references to types. Paths in these are not yet …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>{:.*}</code>, <code>{:.5$}</code>, or <code>{:a$}</code>, etc.\n<code>{:b}</code>\n<code>format_args(&quot;… {arg} …&quot;)</code>\n<code>{:^}</code>\n<code>{:?}</code>\n<code>{}</code>\n<code>{}</code> or <code>{:.*}</code>\n<code>{:&lt;}</code>\n<code>{:5}</code> or <code>{:.5}</code>\nThe <code>x</code> flag in <code>{:x?}</code>.\n<code>{:e}</code>\n<code>{:x}</code>\nThe <code>-</code> flag.\n<code>{a}</code> or <code>{:a$}</code> or <code>{:.a$}</code>\n<code>format_args(…, arg = 1)</code>\n<code>format_args(…, arg)</code>\n<code>{1}</code> or <code>{:1$}</code> or <code>{:.1$}</code>\n<code>{:o}</code>\nThe <code>+</code> flag.\n<code>{:p}</code>\n<code>{:&gt;}</code>\nThe <code>X</code> flag in <code>{:X?}</code>.\n<code>{:E}</code>\n<code>{:X}</code>\nThe alignment. E.g. <code>{:&gt;}</code> or <code>{:&lt;}</code> or <code>{:^}</code>.\nThe <code>#</code> flag.\nIndex into <code>FormatArgs::arguments</code>.\nThe <code>x</code> or <code>X</code> flag (for <code>Debug</code> only). E.g. the <code>x</code> in <code>{:x?}</code>.\nThe fill character. E.g. the <code>.</code> in <code>{:.&gt;10}</code>.\n<code>{}</code> or <code>{:.5}</code> or <code>{:-^20}</code>, etc.\n<code>{}</code>, <code>{:?}</code>, or <code>{:x}</code>, etc.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhich argument this position refers to (Ok), or would’ve …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat kind of position this is. See <code>FormatArgPositionKind</code>.\nThe precision. E.g. <code>{:.5}</code> or <code>{:.precision$}</code>.\nThe <code>+</code> or <code>-</code> flag.\nThe span inside the format string for the full <code>{…}</code> …\nThe span of the name or number.\nThe width. E.g. <code>{:5}</code> or <code>{:width$}</code>.\nThe <code>0</code> flag. E.g. the <code>0</code> in <code>{:02x}</code>.\nData about a generic const parameter (to a function, …\nData about the generic parameters of a function, struct, …\nData about a generic lifetime parameter (to a function, …\nData about a generic type parameter (to a function, …\nA single predicate from a where clause, i.e. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterator of lifetimes field\nIterator of type_or_consts field\nNumber of Generic parameters (type_or_consts + lifetimes)\n<code>None</code> only if the type ref is an [<code>TypeRef::ImplTrait</code>]. …\nA fn pointer. Last element of the vector is the return …\nA literal constant value\nA <code>TypeRefId</code> that is guaranteed to always be <code>TypeRef::Path</code>. …\nA modifier on a bound, currently this is only used for …\nCompare ty::Ty\nCase of an unknown value that rustc might know but we don…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the mutability is <code>Mut</code>.\nReturns <code>true</code> if the mutability is <code>Shared</code>.\nSearch for the name in the associated items only.\nThree possible ways to search for the name in associated …\nImport map entry should strictly match the query string.\nSearch for the name in other items only.\nImport map entry should contain all letters from the query …\nItem import details stored in the <code>ImportMap</code>.\nA map from publicly exported items to its name.\nSearch for the name in both associated and other items.\nImport map entry should match the query string by prefix.\nA way to match import map contents against the search …\nSpecifies whether we want to include associated items in …\nRespect casing of the query string when matching.\nThe value of <code>#[rust_analyzer::completions(...)]</code>, if exists.\nThe module containing this item.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuzzy finds items instead of exact matching.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this item is annotated with <code>#[doc(hidden)]</code>.\nWhether this item is annotated with <code>#[unstable(..)]</code>.\nA name that can be used to import the item, relative to …\nSearches dependencies of <code>krate</code> for an importable name …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a name from current module scope, legacy macros are …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the crate defining this item (or <code>None</code> if <code>self</code> is …\nIterate over all legacy textual scoped macros visible at …\nNamed alias\nThis is a glob-import of all names in the <code>ModPath</code>.\nThe item tree of a source file.\n“Macros 2.0” macro definition.\n<code>pub(in module)</code>, <code>pub(crate)</code> or <code>pub(super)</code>. Also private, …\nThe <code>ModPath</code> is imported normally.\n<code>pub(crate)</code>.\n<code>pub(self)</code>.\n<code>pub</code>.\nVisibility of an item, not yet resolved.\nIdentifies a particular <code>ItemTree</code>.\nThis is a <code>some::path::self</code> import, which imports <code>some::path</code>…\nUnnamed alias, as in <code>use Foo as _;</code>\nWhether the item was imported through an explicit …\nExpands the <code>UseTree</code> into individually imported <code>ModPath</code>s.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a count of a few, expensive items.\nThe <code>UseTreeKind</code> of this <code>UseTree</code>.\n<code>None</code> for <code>const _: () = ();</code>\nThe name of the declared macro.\nPath to the called macro.\nThe <code>add</code> lang item.\nThe <code>add_assign</code> lang item.\nThe <code>align_offset</code> lang item. Align offset for stride != 1; …\nThe <code>alloc_layout</code> lang item.\nThe <code>async_fn</code> lang item.\nThe <code>async_fn_mut</code> lang item.\nThe <code>async_fn_once</code> lang item.\nThe <code>async_fn_once_output</code> lang item.\nThe <code>begin_panic</code> lang item. libstd panic entry point. …\nThe <code>bitand</code> lang item.\nThe <code>bitand_assign</code> lang item.\nThe <code>bitor</code> lang item.\nThe <code>bitor_assign</code> lang item.\nThe <code>bitxor</code> lang item.\nThe <code>bitxor_assign</code> lang item.\nThe <code>box_free</code> lang item.\nThe <code>CStr</code> lang item.\nThe <code>c_void</code> lang item.\nThe <code>clone</code> lang item.\nThe <code>coerce_unsized</code> lang item.\nThe <code>const_panic_fmt</code> lang item.\nThe <code>const_param_ty</code> lang item.\nThe <code>Context</code> lang item.\nThe <code>Break</code> lang item.\nThe <code>Continue</code> lang item.\nThe <code>copy</code> lang item.\nThe <code>coroutine</code> lang item.\nThe <code>coroutine_state</code> lang item.\nThe <code>deref</code> lang item.\nThe <code>deref_mut</code> lang item.\nThe <code>deref_target</code> lang item.\nThe <code>destruct</code> lang item.\nThe <code>discriminant_type</code> lang item. The associated item of …\nThe <code>discriminant_kind</code> lang item.\nThe <code>dispatch_from_dyn</code> lang item.\nThe <code>div</code> lang item.\nThe <code>div_assign</code> lang item.\nThe <code>drop</code> lang item.\nThe <code>drop_in_place</code> lang item.\nThe <code>dyn_metadata</code> lang item.\nThe <code>eh_catch_typeinfo</code> lang item.\nThe <code>eh_personality</code> lang item.\nThe <code>exchange_malloc</code> lang item.\nThe <code>fn_</code> lang item.\nThe <code>fn_mut</code> lang item.\nThe <code>fn_once</code> lang item.\nThe <code>fn_once_output</code> lang item.\nThe <code>fn_ptr_addr</code> lang item.\nThe <code>fn_ptr_trait</code> lang item.\nThe <code>format_alignment</code> lang item.\nThe <code>format_argument</code> lang item.\nThe <code>format_arguments</code> lang item.\nThe <code>format_count</code> lang item.\nThe <code>format_placeholder</code> lang item.\nThe <code>format_unsafe_arg</code> lang item.\nThe <code>freeze</code> lang item.\nThe <code>future_trait</code> lang item.\nThe <code>future_output</code> lang item.\nThe <code>poll</code> lang item.\nThe <code>get_context</code> lang item.\nThe <code>index</code> lang item.\nThe <code>index_mut</code> lang item.\nThe <code>into_future</code> lang item.\nThe <code>into_iter</code> lang item.\nThe <code>iterator</code> lang item.\nThe <code>next</code> lang item.\nA representation of all the valid language items in Rust.\nThe <code>manually_drop</code> lang item.\nThe <code>maybe_uninit</code> lang item.\nThe <code>meta_sized</code> lang item.\nThe <code>metadata_type</code> lang item.\nThe <code>mul</code> lang item.\nThe <code>mul_assign</code> lang item.\nThe <code>neg</code> lang item.\nThe <code>not</code> lang item.\nThe <code>Option</code> lang item.\nThe <code>None</code> lang item.\nThe <code>Some</code> lang item.\nThe <code>Ordering</code> lang item.\nThe <code>owned_box</code> lang item.\nThe <code>panic</code> lang item.\nThe <code>panic_bounds_check</code> lang item.\nThe <code>panic_cannot_unwind</code> lang item.\nThe <code>panic_display</code> lang item.\nThe <code>panic_fmt</code> lang item.\nThe <code>panic_impl</code> lang item.\nThe <code>panic_info</code> lang item.\nThe <code>panic_location</code> lang item.\nThe <code>panic_misaligned_pointer_dereference</code> lang item.\nThe <code>panic_nounwind</code> lang item.\nThe <code>panic_null_pointer_dereference</code> lang item.\nThe <code>eq</code> lang item.\nThe <code>partial_ord</code> lang item.\nThe <code>phantom_data</code> lang item.\nThe <code>pin</code> lang item.\nThe <code>new_unchecked</code> lang item.\nThe <code>pointee_sized</code> lang item.\nThe <code>pointee_trait</code> lang item.\nThe <code>pointer_like</code> lang item.\nThe <code>Poll</code> lang item.\nThe <code>Pending</code> lang item.\nThe <code>Ready</code> lang item.\nThe <code>Range</code> lang item.\nThe <code>RangeFrom</code> lang item.\nThe <code>RangeFull</code> lang item.\nThe <code>range_inclusive_new</code> lang item.\nThe <code>RangeInclusive</code> lang item.\nThe <code>RangeTo</code> lang item.\nThe <code>RangeToInclusive</code> lang item.\nThe <code>receiver</code> lang item.\nThe <code>receiver_target</code> lang item.\nThe <code>rem</code> lang item.\nThe <code>rem_assign</code> lang item.\nThe <code>Err</code> lang item.\nThe <code>Ok</code> lang item.\nThe <code>ResumeTy</code> lang item.\nThe <code>shl</code> lang item.\nThe <code>shl_assign</code> lang item.\nThe <code>shr</code> lang item.\nThe <code>shr_assign</code> lang item.\nThe <code>sized</code> lang item.\nThe <code>slice_len_fn</code> lang item.\nThe <code>start</code> lang item.\nThe <code>String</code> lang item.\nThe <code>structural_peq</code> lang item. Trait injected by …\nThe <code>structural_teq</code> lang item. Trait injected by …\nThe <code>sub</code> lang item.\nThe <code>sub_assign</code> lang item.\nThe <code>sync</code> lang item.\nThe <code>termination</code> lang item.\nThe <code>transmute_opts</code> lang item.\nThe <code>transmute_trait</code> lang item.\nThe <code>Try</code> lang item.\nThe <code>branch</code> lang item.\nThe <code>from_output</code> lang item.\nThe <code>from_residual</code> lang item.\nThe <code>from_yeet</code> lang item.\nThe <code>tuple_trait</code> lang item.\nThe <code>unpin</code> lang item.\nThe <code>unsafe_cell</code> lang item.\nThe <code>unsafe_pinned</code> lang item.\nThe <code>unsize</code> lang item.\nThe <code>va_list</code> lang item.\nSalsa query. This will look for lang items in a specific …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOpposite of <code>LangItem::name</code>\nOpposite of <code>LangItem::name</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSalsa query. Look for a lang item, starting from the …\nMacros inside attributes, i.e. attribute macros and derive …\nFunction-like macros, suffixed with <code>!</code>.\nPseudo-module introduced by a block scope (contains only …\nContains the results of (early) name resolution.\nNote that non-inline modules, by definition, live inside …\nParts of the def map that are only needed when analyzing …\nSee <code>sub_namespace_match()</code>.\nThe module id of a crate or block root.\nExpansion of associated items\nPost-nameres attribute resolution.\nReturns the module containing <code>local_mod</code>, either the parent …\nReturns a node which declares this module, either a …\nReturns the range which declares this module, either a …\nReturns a node which defines this module. That is, a file …\nReturns a node which defines this module. That is, a file …\nSame as [<code>definition_source</code>] but only returns the file id …\nDiagnostics emitted during DefMap construction.\nGet a reference to the def map’s diagnostics.\nPath of the form <code>Enum::Variant</code> (and not <code>Variant</code> alone).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA mapping from <code>hir_expand::MacroDefId</code> to <code>crate::MacroId</code>.\nThe modules and their data declared in this crate.\nWhere does this module come from?\nIf this <code>DefMap</code> is for a block expression, returns the …\nParent module in the same <code>DefMap</code>.\nNameres-specific procedural macro data and helpers.\nThis is the same as <code>Self::crate_root</code> for crate def maps, …\nDeclared visibility of this module.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttribute resolved to an attribute macro.\nAttribute resolved to something else that does not require …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNote: Not to be used directly within hir-def/hir-ty\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a set of names available in the current scope.\nChecks if we rename <code>renamed</code> (currently named <code>current_name</code>) …\nChecks if we rename <code>renamed</code> to <code>name</code>, will the meaning of …\nResolve known enum from std, like <code>std::result::Result</code>\nResolve known struct from std, like <code>std::boxed::Box</code>\nResolve known trait from std, like <code>std::futures::Future</code>\nBuilds a resolver for type references inside this def.\n<code>expr_id</code> is required to be an expression id that comes …\nIndicates whether the struct has a <code>#[fundamental]</code> …\nA single field of an enum variant or struct\nThe <code>#[target_feature]</code> attribute is necessary to check …\nIndicates whether this struct is <code>Box</code>.\nIndicates whether this struct is <code>ManuallyDrop</code>.\nIndicates whether the struct is <code>PhantomData</code>.\nIndicates whether this struct is <code>UnsafeCell</code>.\nIndicates whether this struct is <code>UnsafePinned</code>.\nIndicates whether the struct has a …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nTrue if the first param is <code>self</code>. This is relevant to …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nMaps a <code>UseTree</code> contained in this import back to its AST …\nThe token cannot join with the following token to form a …\nThe token can join with the following token to form a …\nThe token can join with the following token to form a …\nIndicates whether a token can join with the following …\nThe anchor this span is relative to.\nThe syntax context of the span.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of following token trees that belong to this …\nThe text range of this span, relative to the anchor. We …\nVisibility is restricted to a certain module.\nVisibility is restricted to the crate.\nVisibility is unrestricted.\nVisibility of an item, with the path resolved.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")