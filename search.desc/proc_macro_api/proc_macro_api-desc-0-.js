searchState.loadedDescShard("proc_macro_api", 0, "Client-side Proc-Macro crate\nAn attribute-like procedural macro.\nA macro that derives implementations for a struct or enum.\nRepresents a dynamically loaded library containing …\nA handle to a specific proc-macro (a <code>#[proc_macro]</code> …\nA handle to an external process which load dylibs with …\nRepresents different kinds of procedural macros that can …\nRepresents errors encountered when communicating with the …\nChecks if the proc-macro server has exited.\nExpands the procedural macro by sending an expansion …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the type of procedural macro.\nThe initial proc-macro-srv protocol, soon to be deprecated.\nLoads a proc-macro dylib into the server process returning …\nReturns the name of the procedural macro.\nCreates a new MacroDylib instance with the given path.\nReturns the absolute path to the proc-macro server.\nSpawns an external process as the proc macro server and …\nThe versions of the server protocol\nLegacy span type, only defined here as it is still used by …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProtocol functions for json.\nDefines messages for cross-process message passing based …\nReads a JSON message from the input stream.\nWrites a JSON message to the output stream.\nPerforms an API version check between the client and the …\nReturns the API version supported by the server. Since […\nRepresents a macro expansion request sent from the client.\nExpands a procedural macro. Since [<code>NO_VERSION_CHECK_VERSION</code>…\nReturns result of a macro expansion. Since […\nRepresents the input data required for expanding a macro.\nRepresents an extended macro expansion response, including …\nReturns the result of a macro expansion, including …\nRepresents global expansion settings, including span …\nDefault mode, where spans are identified by an ID.\nRetrieves a list of macros from a given dynamic library. …\nReturns a list of available macros in a dynamic library. …\nRepresents an error message when a macro expansion results …\nRepresents requests sent from the client to the …\nRepresents responses sent from the proc-macro-srv to the …\nRust Analyzer-specific span handling mode.\nConfiguration settings for the proc-macro-srv.\nSets server-specific configurations. Since […\nConfirms the application of a configuration update. Since […\nDefines the mode used for handling span data.\nPossible attributes for the attribute-like macros.\nDefines the <code>call_site</code> span location.\nThe current working directory for the macro expansion.\nMacro expansion data, including the macro body, name and …\nDefines the <code>def_site</code> span location.\nEnvironment variables to set during macro expansion.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nmarker for serde skip stuff\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe path to the dynamic library containing the macro.\nArgument of macro call.\nName of macro to expand.\nDefines the <code>mixed_site</code> span location.\nDetermines whether to serialize the expansion settings.\nAdditional span data mappings.\nTable of additional span data.\nDefines how span data should be handled.\nThe expanded syntax tree.\nCurrent API version of the proc-macro protocol.\nWhether literals encode their kind as an additional u32 …")